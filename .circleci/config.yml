version: 2.1

commands:
  test_core:
    parameters:
      py:
        default: "36"
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: "cd packages/python; sudo pip install -r ./new_plotly/test_requirements/requirements_<<parameters.py>>_core.txt"
      - run:
          name: Test core
          command: "cd packages/python/new_plotly; pytest new_plotly/tests/test_core"
          no_output_timeout: 20m

  test_optional:
    parameters:
      py:
        default: "36"
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: "cd packages/python; sudo pip install -r ./new_plotly/test_requirements/requirements_<<parameters.py>>_optional.txt"
      - run:
          name: Install new_plotly-geo
          command: "cd packages/python/new_plotly-geo; sudo pip install -e ."
      - run:
          name: Test core
          command: "cd packages/python/new_plotly; pytest new_plotly/tests/test_core"
          no_output_timeout: 20m
      - run:
          name: Test optional
          command: "cd packages/python/new_plotly; pytest new_plotly/tests/test_optional"
          no_output_timeout: 40m
      - run:
          name: Test utils
          command: "cd packages/python/new_plotly; pytest _plotly_utils/tests/"
          no_output_timeout: 20m
      - run:
          name: Test io
          command: "cd packages/python/new_plotly; pytest new_plotly/tests/test_io"
          no_output_timeout: 20m
      - run:
          name: Test dependencdies not imported
          command: "cd packages/python/new_plotly; pytest -x test_init/test_dependencies_not_imported.py"
      - run:
          name: Test lazy imports
          command: "cd packages/python/new_plotly; pytest -x test_init/test_lazy_imports.py"

  test_orca:
    parameters:
      py:
        default: "36"
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: "cd packages/python; sudo pip install -r ./new_plotly/test_requirements/requirements_<<parameters.py>>_optional.txt"
      - run:
          name: Install new_plotly-geo
          command: "cd packages/python/new_plotly-geo; sudo pip install -e ."
      - run:
          name: Install orca
          command: |
            sudo npm install electron@1.8.4 sudo npm install orca
            sudo apt-get install -y poppler-utils libxtst6 xvfb libgtk2.0-0 libgconf-2-4 libnss3 libasound2 rename
            echo 'export PATH="/home/circleci/project/node_modules/.bin:$PATH"' >> $BASH_ENV
      - run:
          name: Test orca
          command: "cd packages/python/new_plotly; pytest new_plotly/tests/test_orca"
          no_output_timeout: 20m
      - store_artifacts:
          path: packages/python/new_plotly/new_plotly/tests/test_orca/images/linux/failed

jobs:
  check-code-formatting:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers

    steps:
      - checkout
      - run:
          name: Install black
          command: "sudo pip install black==19.10b0"
      - run:
          name: Check formatting with black
          command: "black --check ."

  # Core
  python_36_core:
    docker:
      - image: circleci/python:3.6-stretch-node-browsers
    steps:
      - test_core:
          py: "36"

  python_37_core:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
    steps:
      - test_core:
          py: "37"

  python_38_core:
    docker:
      - image: circleci/python:3.8-buster-node-browsers
    steps:
      - test_core:
          py: "38"

  python_39_core:
    docker:
      - image: circleci/python:3.9-buster-node-browsers
    steps:
      - test_core:
          py: "39"

  # Optional
  python_36_optional:
    docker:
      - image: circleci/python:3.6-stretch-node-browsers
    steps:
      - test_optional:
          py: "36"

  python_37_optional:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
    steps:
      - test_optional:
          py: "37"

  python_38_optional:
    docker:
      - image: circleci/python:3.8-buster-node-browsers
    steps:
      - test_optional:
          py: "38"

  python_39_optional:
    docker:
      - image: circleci/python:3.9-buster-node-browsers
    steps:
      - test_optional:
          py: "39"

  # Orca
  python_38_orca:
    docker:
      - image: circleci/python:3.8-buster-node-browsers
    steps:
      - test_orca:
          py: "38"

  # Percy
  python_37_percy:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PERCY_ENABLED: True
          PERCY_PROJECT: new_plotly/new_plotly.py
    resource_class: large

    steps:
      - checkout
      - run:
          name: Inject Percy Environment variables
          command: |
            echo 'export PERCY_TOKEN="$PERCY_PYTHON_TOKEN_V0"' >> $BASH_ENV
      - run:
          name: Install requirements
          command: |
            sudo pip install --upgrade virtualenv
            python -m venv venv || virtualenv venv
            . venv/bin/activate
            pip install -e ./packages/python/plotly
            pip install -e ./packages/python/plotly-geo
            pip install -r ./packages/python/plotly/test_requirements/requirements_37_optional.txt
      - run:
          name: Build html figures
          command: |
            . venv/bin/activate
            python test/percy/plotly-express.py
      - run:
          name: Run percy snapshots
          command: |
            npx percy snapshot test/percy/
            rm test/percy/*.html

  # Chart studio
  python_37_chart_studio:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
    resource_class: large

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: "cd packages/python; sudo pip install -r ./chart-studio/test_requirements/requirements_37.txt"
      - run:
          name: Tests
          command: "cd packages/python/chart-studio; pytest -x chart_studio/tests/"
          no_output_timeout: 20m

  plotlyjs_dev_build:
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          LANG: en_US.UTF-8
    resource_class: large

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: "cd packages/python; sudo pip install -r ./new_plotly/test_requirements/requirements_37_core.txt black inflect; sudo pip install jupyterlab~=3.0"
      - run:
          name: Update jupyterlab-new_plotly version
          command: "cd packages/python/new_plotly; python setup.py updateplotlywidgetversion"
      - run:
          name: Update new_plotly.js to dev
          command: "cd packages/python/new_plotly; python setup.py updateplotlyjsdev"
      - run:
          name: Test core
          command: "cd packages/python/new_plotly; locale; pytest -k 'not nodev' new_plotly/tests/test_core"
          no_output_timeout: 20m
      - run:
          name: Commit
          command: |
            cd packages/python/plotly
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            git add -A
            git commit -m "Codegen"
          when: always
      - run:
          name: Build source distribution packages
          command: |
            cd packages/python/plotly
            python setup.py sdist
          when: always
      - store_artifacts:
          path: packages/python/new_plotly/dist

  build-doc:
    resource_class: xlarge
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7-stretch-node-browsers

    steps:
      - add_ssh_keys:
          fingerprints:
            - "dc:5f:39:48:00:b4:72:34:e1:d2:c4:e1:1f:d1:e2:ce" #plotlydocbot

      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "doc/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            cd doc
            python3 -m venv venv
            . venv/bin/activate
            npm install electron@1.8.4
            npm install orca
            pip install -U pip
            pip uninstall -y plotly
            pip install -r requirements.txt
            if [ "${CIRCLE_BRANCH}" != "doc-prod" ]; then
              pip uninstall -y plotly
              cd ../packages/python/plotly
              pip install -e .
              cd ../../../doc
            fi
            echo 'export PATH="/home/circleci/project/doc/node_modules/.bin:$PATH"' >> $BASH_ENV
            sudo apt-get install -y poppler-utils libxtst6 xvfb libgtk2.0-0 libgconf-2-4 libnss3 libasound2 rename
            cd ..

      - save_cache:
          paths:
            - ./doc/venv
            - ./doc/node_modules
          key: v1-dependencies-{{ checksum "doc/requirements.txt" }}

      - run:
          name: make html
          command: |
            cd doc
            . venv/bin/activate
            echo ${mapbox_token} > python/.mapbox_token
            make -kj8 || make -kj8
            curl https://raw.githubusercontent.com/plotly/graphing-library-docs/master/front-matter-ci.py > front-matter-ci.py
            curl https://raw.githubusercontent.com/plotly/graphing-library-docs/master/check-or-enforce-order.py > check-or-enforce-order.py
            python front-matter-ci.py build/html
            python check-or-enforce-order.py build/html
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              cd build/html
              git init
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git add *
              git commit -m "build of https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push --force git@github.com:plotly/plotly.py-docs.git master:built
              rm -rf .git
              cd ../..
              cd build/ipynb
              git init
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git add *
              git commit -m "build of https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push --force git@github.com:plotly/plotly.py-docs.git master:built_ipynb
              rm -rf .git
              cd ../..
            fi
            tar -zcf build/html.tgz build/html
            rm -rf build/html build/ipynb
            cd ..

      - run:
          name: trigger doc build
          command: |
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              git clone --depth=1 https://github.com/plotly/graphing-library-docs.git
              cd graphing-library-docs
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git commit --allow-empty -m "deploying https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push
              cd ..
              rm -rf graphing-library-docs
            fi

      - run:
          name: make doc
          command: |
            cd doc
            . venv/bin/activate
            # For the API doc, we need to use the local version of plotly
            # since we are tweaking the source because of
            # graph_objs/graph_objects
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              pip uninstall -y plotly
              cd ../packages/python/plotly
              pip install -e .
              cd ../../../doc
            fi
            cd apidoc
            make html
            if [ "${CIRCLE_BRANCH}" == "doc-prod" ]; then
              cd _build/html
              touch .nojekyll
              git init
              git config user.name plotlydocbot
              git config user.email accounts@plot.ly
              git add *
              git add .nojekyll
              git commit -m "build of https://github.com/plotly/plotly.py/commit/${CIRCLE_SHA1}"
              git push --force git@github.com:plotly/plotly.py-docs.git master:gh-pages
              rm -rf .git
              cd ../..
            fi
            cd ../..

      - store_artifacts:
          path: doc/build
          destination: doc/build
      - store_artifacts:
          path: doc/apidoc/_build/
          destination: doc/apidoc/_build/

workflows:

  code_formatting:
    jobs:
      - check-code-formatting
  dev_build:
    jobs:
      - plotlyjs_dev_build

  build:
    jobs:
      - python_36_core
      - python_37_core
      - python_38_core
      - python_39_core
      - python_36_optional
      - python_37_optional
      - python_38_optional
      - python_39_optional
      - python_38_orca
      - python_37_percy
      - python_37_chart_studio
      - build-doc
